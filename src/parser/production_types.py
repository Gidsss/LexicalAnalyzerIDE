from abc import ABC, abstractmethod
from src.lexer import Token

### BASE CLASS
class Production(ABC): ... # to avoid undefined Production error in type hint
class Production(ABC):
    @abstractmethod
    def string(self, indent = 0) -> str: ...
    @abstractmethod
    def header(self) -> str: ...
    @abstractmethod
    def child_nodes(self) -> None | dict[str, Production | Token]: ...
    # @abstractmethod
    # def flat_string(self) -> str: ...
    # @abstractmethod
    # def python_string(self) -> str: ...

class Statement(Production):
    'for productions that can be in blocks'
    def string(self, indent = 0) -> str: ...
    def header(self) -> str: ...
    def child_nodes(self) -> None | dict[str, Production | Token]: ...

class Value(Production):
    'for productions that evaluate to a value'
    def string(self, indent = 0) -> str: ...
    def header(self) -> str: ...
    def child_nodes(self) -> None | dict[str, Production | Token]: ...
class Expression(Value):
    '''
    for values that have operands
    eg. id + id, id - id, fn_call() * id, id[1] / id
    '''
    def string(self, indent = 0) -> str: ...
    def header(self) -> str: ...
    def child_nodes(self) -> None | dict[str, Production | Token]: ...
class Unit(Value):
    '''
    for values that don't have operands
    eg. identifier, identifier[2], "string", ident.property
    fnCall(), "string | fmt | !"
    '''
    def string(self, indent = 0) -> str: ...
    def header(self) -> str: ...
    def child_nodes(self) -> None | dict[str, Production | Token]: ...

class Iterable(Unit):
    '''
    for Units that can: contain other Productions, and/or be subsliced
    eg. arrays, string fmts, and string literals
    '''
    def string(self, indent = 0) -> str: ...
    def header(self) -> str: ...
    def child_nodes(self) -> None | dict[str, Production | Token]: ...
class IdentifierProds(Unit):
    '''
    for Units that are identifiers
    eg. identifiers, identifier[2], fnCall(), ident.property
    '''
    def string(self, indent = 0) -> str: ...
    def header(self) -> str: ...
    def child_nodes(self) -> None | dict[str, Production | Token]: ...
